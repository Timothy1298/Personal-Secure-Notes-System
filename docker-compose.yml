version: '3.8'

services:
  # Web Application
  app:
    build:
      context: .
      target: production
    container_name: personal-notes-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./storage:/var/www/html/storage
      - ./exports:/var/www/html/exports
      - ./imports:/var/www/html/imports
      - ./backups:/var/www/html/backups
      - ./uploads:/var/www/html/uploads
      - ./logs:/var/www/html/logs
    environment:
      - APP_ENV=production
      - DB_HOST=mysql
      - DB_DATABASE=personal
      - DB_USERNAME=timothy
      - DB_PASSWORD=41181671Timothy@
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  # Development Application
  app-dev:
    build:
      context: .
      target: development
    container_name: personal-notes-app-dev
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
      - ./exports:/var/www/html/exports
      - ./imports:/var/www/html/imports
      - ./backups:/var/www/html/backups
      - ./uploads:/var/www/html/uploads
      - ./logs:/var/www/html/logs
    environment:
      - APP_ENV=development
      - DB_HOST=mysql
      - DB_DATABASE=personal
      - DB_USERNAME=timothy
      - DB_PASSWORD=41181671Timothy@
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG=client_host=host.docker.internal
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    profiles:
      - development

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: personal-notes-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=personal
      - MYSQL_USER=timothy
      - MYSQL_PASSWORD=41181671Timothy@
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: personal-notes-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  # WebSocket Server
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: personal-notes-websocket
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=mysql
      - DB_DATABASE=personal
      - DB_USERNAME=timothy
      - DB_PASSWORD=41181671Timothy@
    depends_on:
      - redis
      - mysql
    networks:
      - app-network

  # Background Jobs Worker
  worker:
    build:
      context: .
      target: production
    container_name: personal-notes-worker
    restart: unless-stopped
    command: php worker.php
    volumes:
      - ./storage:/var/www/html/storage
      - ./logs:/var/www/html/logs
    environment:
      - APP_ENV=production
      - DB_HOST=mysql
      - DB_DATABASE=personal
      - DB_USERNAME=timothy
      - DB_PASSWORD=41181671Timothy@
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  # Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: personal-notes-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - app-network
    profiles:
      - production

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: personal-notes-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: personal-notes-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network
    profiles:
      - monitoring

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: personal-notes-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: personal-notes-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - app-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: personal-notes-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network
    profiles:
      - logging

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge
